from tradingview_ta import TA_Handler, Exchange
import time


def get_supported_timeframes(symbol: str = "BTCUSDT", exchange: str = "BINANCE") -> list:
  """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã"""
  test_timeframes = [
    "1m", "3m", "5m", "15m", "30m", "40m",
    "1h", "2h", "3h", "4h", "6h",
    "8h", "12h", "1D", "3D", "1W",
    "1M", "3M", "6M", "1Y", "1000Y"
  ]

  supported = []

  for timeframe in test_timeframes:
    try:
      handler = TA_Handler(
        symbol=symbol,
        exchange=exchange,
        screener="crypto",
        interval=timeframe
      )
      # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      analysis = handler.get_analysis()

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏–∑–µ
      if analysis.summary and analysis.indicators:
        supported.append(timeframe)
        print(f"‚úÖ {timeframe} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
      else:
        print(f"‚ö†Ô∏è  {timeframe} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")

      # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      time.sleep(1)

    except Exception as e:
      print(f"‚ùå {timeframe} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {str(e)}")
      continue

  return sorted(supported, key=lambda x: parse_timeframe(x))


def parse_timeframe(tf: str) -> int:
  """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
  unit = tf[-1]
  value = int(tf[:-1]) if tf[:-1] else 1
  multipliers = {'m': 1, 'h': 60, 'D': 1440, 'W': 10080, 'M': 43200, 'Y': 525600}
  return value * multipliers[unit]


if __name__ == "__main__":
  print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è BTC/USDT...")
  timeframes = get_supported_timeframes()

  print("\nüìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:")
  for tf in timeframes:
    print(f" - {tf}")

  print(f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")