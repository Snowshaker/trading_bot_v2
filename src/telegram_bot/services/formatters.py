# src/telegram_bot/services/formatters.py
from decimal import Decimal
from datetime import datetime
from pathlib import Path
from datetime import datetime

from tabulate import tabulate

from src.core.paths import TW_ANALYSIS

class AnalysisPrinter:
    def __init__(self, data_dir: Path = TW_ANALYSIS):
        self.data_dir = data_dir
        print(f"Analysis data path: {self.data_dir.absolute()}")


def format_balance(balance_data: list, total_usd: Decimal) -> str:
  """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–ª–∞–Ω—Å–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
  headers = ["–í–∞–ª—é—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ç–æ–∏–º–æ—Å—Ç—å (USD)"]
  rows = []

  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (asset, amount, value)
  for asset, amount, value in balance_data:
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    amount_str = f"{amount.normalize():.8f}".rstrip('0').rstrip('.')
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    value_str = f"${value.quantize(Decimal('0.01')):,.2f}"

    rows.append([asset, amount_str, value_str])

  table = tabulate(
    rows,
    headers=headers,
    tablefmt="presto",
    stralign="right",
    numalign="decimal"
  )

  return f"<code>{table}\n\n–ò—Ç–æ–≥–æ: ${total_usd:,.2f}</code>"


def format_analysis(analysis_data: dict) -> str:
  if not analysis_data:
    return "<b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞</b>"

  tf_order = ["1m", "5m", "15m", "30m", "1h", "2h", "4h", "1D", "1W", "1M"]

  message = ["<b>üìà –ê–Ω–∞–ª–∏–∑ TradingView:</b>\n"]

  for symbol, data in analysis_data.items():
    if not data or "timeframes" not in data:
      continue

    message.append(f"\n<b>{symbol}</b>")
    timeframes = data.get("timeframes", {})

    for tf in tf_order:
      if tf not in timeframes:
        continue

      rec = timeframes[tf].get("recommendation", "NEUTRAL")
      score = timeframes[tf].get("score", 0)

      # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
      if score >= 2:
        color = "üîµ"
      elif score >= 1:
        color = "üü¢"
      elif score <= -2:
        color = "üü£"
      elif score <= -1:
        color = "üî¥"
      else:
        color = "‚ö™"

      message.append(f"{color} {tf}: {rec.split('_')[-1]}")

  return "\n".join(message)


from decimal import Decimal
from tabulate import tabulate

from decimal import Decimal
from tabulate import tabulate


def format_trade_history(trades: list) -> str:
  """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tabulate"""

  headers = ["  –î–∞—Ç–∞  ", " –ü–∞—Ä–∞ ", "  –¢–∏–ø  ", "  –ö–æ–ª-–≤–æ  ", "    –¶–µ–Ω–∞    ",
             "  –°—É–º–º–∞  "]  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  rows = []

  for trade in trades:
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    qty = Decimal(str(trade['qty']))
    qty_str = f"{qty.normalize():.8f}".rstrip('0').rstrip('.')[:8]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
    side = "üü¢  BUY" if trade['is_buyer'] else "üî¥ SELL"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
    price = Decimal(str(trade['price']))
    price_str = f"${price:12,.4f}".replace(",", " ")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
    total = Decimal(str(trade['quote_qty']))
    total_str = f"${total:9,.2f}"

    rows.append([
      trade['time'].strftime('%d.%m.%Y %H:%M'),
      trade['symbol'],
      side.center(9),
      qty_str,
      price_str,
      total_str
    ])

  table = tabulate(
    rows,
    headers=headers,
    tablefmt="simple",
    stralign="right",
    numalign="right"
  )

  return f"<code>üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n\n{table}</code>"