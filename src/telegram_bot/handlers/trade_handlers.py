#src/telegram_bot/handlers/trade_handlers.py
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
  ContextTypes,
  CommandHandler,
  MessageHandler,
  filters,
  ConversationHandler,
  CallbackQueryHandler
)
from decimal import Decimal
from src.core.settings.telegram_config import TELEGRAM_ADMINS
from src.core.api.binance_client.transactions_executor import TransactionsExecutor, OrderExecutionError
from src.core.api.binance_client.info_fetcher import BinanceInfoFetcher
from src.core.settings.config import SYMBOLS, BINANCE_API_KEY, BINANCE_SECRET_KEY, TESTNET

logger = logging.getLogger(__name__)

SELECT_SYMBOL, ENTER_QUANTITY, CONFIRM_TRADE = range(3)


class TradeHandlers:
  def __init__(self):
    self.executor = TransactionsExecutor()
    self.info_fetcher = BinanceInfoFetcher(
          api_key=BINANCE_API_KEY,
          api_secret=BINANCE_SECRET_KEY,
          testnet=TESTNET
    )

  async def check_admin(self, update: Update) -> bool:
    user = update.effective_user
    if user.id not in TELEGRAM_ADMINS:
      await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
      return False
    return True

  async def start_trade(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await self.check_admin(update):
      context.user_data.clear()
      return ConversationHandler.END

    action = update.message.text[1:].lower()
    context.user_data['action'] = action
    
    symbols_available = self._get_available_symbols(action)

    if not symbols_available:
        await update.message.reply_text(
            f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '{action}' –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –µ–µ –Ω–∞—á–∞–ª–∞."
        )
        context.user_data.clear()
        return ConversationHandler.END

    keyboard = [
      [InlineKeyboardButton(symbol, callback_data=symbol)]
      for symbol in symbols_available
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    action_rus = "–ø–æ–∫—É–ø–∫–∏" if action == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"
    await update.message.reply_text(
      f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è {action_rus}:",
      reply_markup=reply_markup
    )
    return SELECT_SYMBOL

  async def select_symbol(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data['symbol'] = query.data
    action = context.user_data.get('action', '–æ–ø–µ—Ä–∞—Ü–∏–∏')
    action_rus = "–ø–æ–∫—É–ø–∫–∏" if action == "buy" else "–ø—Ä–æ–¥–∞–∂–∏"

    await query.edit_message_text(
      f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {query.data}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {action_rus}:"
    )
    return ENTER_QUANTITY

  async def enter_quantity(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
      quantity_str = update.message.text
      quantity = Decimal(quantity_str)
      if quantity <= Decimal(0):
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ENTER_QUANTITY
      
      context.user_data['quantity'] = quantity

      symbol = context.user_data['symbol']
      current_price = self.info_fetcher.get_current_price(symbol) # Returns Decimal
      
      estimated_cost_str = "–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å"
      if current_price and current_price > Decimal(0):
          estimated_cost = quantity * current_price
          estimated_cost_str = f"{estimated_cost:.2f} USDT (–ø—Ä–∏–º–µ—Ä–Ω–æ)"


      await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: {context.user_data.get('action', '').upper()}\n"
        f"–°–∏–º–≤–æ–ª: {symbol}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {estimated_cost_str}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä?",
        reply_markup=InlineKeyboardMarkup([
          [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm"),
           InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
      )
      return CONFIRM_TRADE
    except ValueError:
      await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
      return ENTER_QUANTITY
    except Exception as e:
      logger.error(f"Error in enter_quantity: {e}", exc_info=True)
      await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
      return ENTER_QUANTITY

  async def confirm_trade(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    action_to_perform = context.user_data.get('action')
    if not action_to_perform:
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    if query.data == "cancel":
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    try:
        symbol = context.user_data.get('symbol')
        quantity_decimal = context.user_data.get('quantity') # –≠—Ç–æ Decimal

        if not symbol or quantity_decimal is None:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–¥–µ–ª–∫–∏. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            context.user_data.clear()
            return ConversationHandler.END
        
        action_upper = action_to_perform.upper()
        action_rus = "–ø–æ–∫—É–ø–∫–∞" if action_upper == "BUY" else "–ø—Ä–æ–¥–∞–∂–∞"

        await query.edit_message_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {action_rus} –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}...")

        result = self.executor.execute_order(
            symbol=symbol,
            side=action_upper,
            quantity=float(quantity_decimal), # executor –æ–∂–∏–¥–∞–µ—Ç float
            order_type="MARKET"
        )

        if result and result.get('success'):
            executed_qty_val = result.get('executed_qty', 0.0)
            avg_price_val = result.get('avg_price', 0.0)
            base_asset = result.get('base_asset', symbol.replace("USDT", ""))
            quote_asset = result.get('quote_asset', "USDT")

            success_message = (
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è {action_rus} (—Å—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}):\n"
                f"–°–∏–º–≤–æ–ª: {result.get('symbol')}\n"
                f"–ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {executed_qty_val:.8f} {base_asset}\n"
            )
            if avg_price_val > 0:
                 success_message += f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price_val:.8f} {quote_asset}\n"
            else:
                 success_message += "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ 0.0)\n"
            
            commission_val = result.get('commission', 0.0)
            commission_asset_val = result.get('commission_asset', '')
            if commission_val > 0 and commission_asset_val:
                success_message += f"–ö–æ–º–∏—Å—Å–∏—è: {commission_val:.8f} {commission_asset_val}\n"

            await query.edit_message_text(success_message)

            try:src/core/api/binance_client/transactions_executor.py
                balance_base = self.info_fetcher.get_asset_balance(base_asset) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ None
                balance_quote = self.info_fetcher.get_asset_balance(quote_asset)
                
                balance_message = f"\nüí∞ –ë–∞–ª–∞–Ω—Å—ã:\n"
                if balance_base:
                    balance_message += (f"{balance_base.get('asset', base_asset)}: "
                                        f"{balance_base.get('free', Decimal('0.0'))} (—Å–≤–æ–±.) / "
                                        f"{balance_base.get('locked', Decimal('0.0'))} (–∑–∞–±–ª.)\n")
                if balance_quote:
                    balance_message += (f"{balance_quote.get('asset', quote_asset)}: "
                                        f"{balance_quote.get('free', Decimal('0.0'))} (—Å–≤–æ–±.) / "
                                        f"{balance_quote.get('locked', Decimal('0.0'))} (–∑–∞–±–ª.)")
                
                await query.message.reply_text(text=balance_message)
            except Exception as bal_exc:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {symbol}: {bal_exc}", exc_info=True)
                await query.message.reply_text(text="‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.")

        else:
            error_detail = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞."
            if result:
                if isinstance(result.get('raw_response'), dict):
                    binance_msg = result['raw_response'].get('msg')
                    if binance_msg:
                        error_detail = f"–û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏: {binance_msg}"
                elif result.get('status'):
                     error_detail = f"–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {result.get('status')}"
            
            await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}.\n{error_detail}")
            logger.warning(f"Order execution not successful for {symbol}. Result: {result}")

    except OrderExecutionError as e: # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç executor
        logger.error(f"Trade error (OrderExecutionError) for {context.user_data.get('symbol', 'N/A')}: {str(e)}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {str(e)}")
    except KeyError as e:
        logger.error(f"Trade error - KeyError: {str(e)} for symbol {context.user_data.get('symbol', 'N/A')}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: –∫–ª—é—á '{str(e)}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"Trade error for symbol {context.user_data.get('symbol', 'N/A')}: {str(e)}", exc_info=True)
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        context.user_data.clear()

    return ConversationHandler.END

  async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

  def _get_available_symbols(self, action: str):
    return [s for s in SYMBOLS if self._has_balance_for_symbol(s, action)]

  def _has_balance_for_symbol(self, symbol: str, action: str) -> bool:
    asset_to_check = None
    try:
        if symbol not in self.executor.symbols_info:
            self.executor._get_symbol_filters(symbol) 

        symbol_details = self.executor.symbols_info.get(symbol)
        if not symbol_details:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–∏–º–≤–æ–ª–∞ {symbol} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.")
            return False 

        action_lower = action.lower()
        if action_lower == "buy":
            asset_to_check = symbol_details.get('quote_asset')
        elif action_lower == "sell":
            asset_to_check = symbol_details.get('base_asset')
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Å–∏–º–≤–æ–ª—É {symbol}.")
            return False

        if asset_to_check:
            balance_info = self.info_fetcher.get_asset_balance(asset_to_check) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict {'free': Decimal, ...} –∏–ª–∏ None
            if balance_info and isinstance(balance_info.get('free'), Decimal):
                 return balance_info['free'] > Decimal('0')
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ 'free' –Ω–µ Decimal –¥–ª—è {asset_to_check} (—Å–∏–º–≤–æ–ª {symbol}). balance_info: {balance_info}")
            return False
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (–¥–µ–π—Å—Ç–≤–∏–µ: {action}, —Å–∏–º–≤–æ–ª: {symbol}).")
            return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}' –ø–æ —Å–∏–º–≤–æ–ª—É {symbol} (–∞–∫—Ç–∏–≤: {asset_to_check}): {e}", exc_info=True)
        return False


def get_trade_handlers():
  handler = TradeHandlers()

  conv_handler = ConversationHandler(
    entry_points=[
      CommandHandler("buy", handler.start_trade),
      CommandHandler("sell", handler.start_trade)
    ],
    states={
      SELECT_SYMBOL: [CallbackQueryHandler(handler.select_symbol)],
      ENTER_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handler.enter_quantity)],
      CONFIRM_TRADE: [CallbackQueryHandler(handler.confirm_trade)]
    },
    fallbacks=[CommandHandler("cancel", handler.cancel)],
  )

  return [conv_handler]
