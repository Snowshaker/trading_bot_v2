import json
import logging

from binance import Client, exceptions
from decimal import Decimal, ROUND_DOWN
from typing import Optional, Dict
from src.core.settings.config import (
  BINANCE_API_KEY,
  BINANCE_SECRET_KEY,
  TESTNET,
  SAFETY_MARGIN
)


class TransactionsExecutor:
  def __init__(self):
    self.client = Client(
      api_key=BINANCE_API_KEY,
      api_secret=BINANCE_SECRET_KEY,
      testnet=TESTNET
    )
    self.symbols_info = {}
    self.logger = logging.getLogger(self.__class__.__name__)

  def _get_symbol_filters(self, symbol: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ"""
    if symbol not in self.symbols_info:
      info = self.client.get_symbol_info(symbol)
      if not info:
        raise InvalidSymbolError(f"Invalid symbol: {symbol}")
      self.symbols_info[symbol] = {
        'filters': {f['filterType']: f for f in info['filters']},
        'base_asset': info['baseAsset'],
        'quote_asset': info['quoteAsset']
      }
    return self.symbols_info[symbol]

  def _format_quantity(self, symbol: str, quantity: float) -> float:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–∏–º–≤–æ–ª–∞"""
    lot_size = self._get_symbol_filters(symbol)['filters']['LOT_SIZE']
    step = Decimal(lot_size['stepSize']).normalize()
    return float(Decimal(str(quantity)).quantize(step, ROUND_DOWN))

  def _format_price(self, symbol: str, price: float) -> float:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–∏–º–≤–æ–ª–∞"""
    price_filter = self._get_symbol_filters(symbol)['filters']['PRICE_FILTER']
    tick_size = Decimal(price_filter['tickSize']).normalize()
    return float(Decimal(str(price)).quantize(tick_size, ROUND_DOWN))

  def _validate_order_parameters(
    self,
    symbol: str,
    side: str,
    quantity: float,
    order_type: str,
    price: Optional[float] = None
  ):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    logger = self.logger  # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.logger, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π

    try:
      symbol_filters_data = self._get_symbol_filters(symbol)
      symbol_filters = symbol_filters_data.get('filters', {})

      lot_size = symbol_filters.get('LOT_SIZE', {
        'minQty': '0.001',
        'stepSize': '0.001'
      })

      notional_filter = symbol_filters.get('NOTIONAL', {  # –ò–ª–∏ MIN_NOTIONAL –¥–ª—è —Å—Ç–∞—Ä—ã—Ö API
        'minNotional': '5.0',
        'applyToMarket': True  # –í–∞–∂–Ω–æ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
      })
      if 'MIN_NOTIONAL' in symbol_filters and 'NOTIONAL' not in symbol_filters:  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        notional_filter = symbol_filters.get('MIN_NOTIONAL', {
          'minNotional': '5.0',
          'applyToMarket': True
        })

      min_qty = float(lot_size.get('minQty', '0.001'))
      # step_size = float(lot_size.get('stepSize', '0.001')) # step_size –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–¥–µ—Å—å
      min_notional = float(notional_filter.get('minNotional', '5.0'))
      apply_to_market = notional_filter.get('applyToMarket', True)  # –î–ª—è NOTIONAL
      if 'applyMinToMarket' in notional_filter:  # –î–ª—è MIN_NOTIONAL
        apply_to_market = notional_filter.get('applyMinToMarket', True)

      logger.debug(
        f"Validating order: {symbol} {side} {quantity} {order_type} | "
        f"Params: minQty={min_qty}, "  # –£–±—Ä–∞–ª step_size
        f"minNotional={min_notional}, applyToMarket={apply_to_market}"
      )

      if quantity < min_qty:
        error_msg = f"Quantity {quantity} < minQty {min_qty} for {symbol}"
        logger.error(error_msg)
        raise InvalidOrderParameters(error_msg)

      if order_type == Client.ORDER_TYPE_MARKET:  # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if apply_to_market:  # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è NOTIONAL –∏ MIN_NOTIONAL —Ñ–∏–ª—å—Ç—Ä–æ–≤
          current_price_float = self.get_current_price(symbol)  # get_current_price –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float
          if not current_price_float or current_price_float <= 0:
            error_msg = f"Can't validate notional for {symbol} - current price unavailable or zero: {current_price_float}"
            logger.error(error_msg)
            raise InvalidOrderParameters(error_msg)

          notional_value = quantity * current_price_float
          if notional_value < min_notional:
            error_msg = (
              f"Notional value {notional_value:.4f} (qty {quantity} * price {current_price_float}) "
              f"is less than minNotional {min_notional:.4f} for {symbol}"
            )
            logger.error(error_msg)
            raise InvalidOrderParameters(error_msg)

      if order_type == Client.ORDER_TYPE_LIMIT:
        if not price:
          error_msg = f"Price required for limit orders for {symbol}"
          logger.error(error_msg)
          raise InvalidOrderParameters(error_msg)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        price_filter_rules = symbol_filters.get('PRICE_FILTER', {})
        tick_size_str = price_filter_rules.get('tickSize', '0.01')
        tick_size = Decimal(tick_size_str)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–Ω–∞ –∫—Ä–∞—Ç–Ω–∞ tickSize
        if (Decimal(str(price)) % tick_size).compare(Decimal('0')) != 0:
          error_msg = f"Invalid price format for {symbol}. Price {price} is not a multiple of tickSize {tick_size}."
          logger.error(error_msg)
          raise InvalidOrderParameters(error_msg)

      logger.info(f"Order parameters validation passed for {symbol} {side} {quantity}")

    except KeyError as e:
      error_msg = f"Missing key in symbol data during validation for {symbol}: {str(e)}"
      logger.error(error_msg, exc_info=True)
      raise InvalidOrderParameters(error_msg)
    except InvalidOrderParameters:  # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —è–≤–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –æ–±—â–∏–π Exception
      raise
    except Exception as e:
      error_msg = f"Unexpected validation error for {symbol}: {str(e)}"
      logger.error(error_msg, exc_info=True)
      raise InvalidOrderParameters(error_msg)

  def execute_order(
    self,
    symbol: str,
    side: str,
    quantity: float,
    order_type: str = Client.ORDER_TYPE_MARKET,
    price: Optional[float] = None,
    time_in_force: str = Client.TIME_IN_FORCE_GTC  # –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö
  ) -> Dict:
    """
    –ò—Å–ø–æ–ª–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    """
    self.logger.info(f"üîÑ Starting order execution: {symbol} {side} {quantity} {order_type}")

    try:
      symbol_info = self._get_symbol_filters(symbol)
      base_asset = symbol_info['base_asset']
      quote_asset = symbol_info['quote_asset']

      formatted_quantity = self._format_quantity(symbol, quantity)
      formatted_price = self._format_price(symbol, price) if price and order_type != Client.ORDER_TYPE_MARKET else None

      self.logger.debug(
        f"Formatted params for {symbol}: Qty: {quantity} ‚Üí {formatted_quantity} | "
        f"Price: {price} ‚Üí {formatted_price}"
      )

      self._validate_order_parameters(
        symbol,
        side,
        formatted_quantity,
        order_type,
        formatted_price
      )

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è, –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –≤ RiskEngine/Allocation)
      # –î–ª—è —Ä—ã–Ω–æ—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–µ–Ω quote_asset, –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ - base_asset
      asset_to_check = quote_asset if side == Client.SIDE_BUY else base_asset
      available_balance = self.get_available_balance(asset_to_check)  # float
      self.logger.debug(f"Available balance for {asset_to_check}: {available_balance}")

      if side == Client.SIDE_BUY and order_type == Client.ORDER_TYPE_MARKET:
        # –î–ª—è —Ä—ã–Ω–æ—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Å–ª–æ–∂–Ω–æ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π quote_asset –±–µ–∑ quantity_in_quote=True
        # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ –±–∞–ª–∞–Ω—Å–∞
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –î–û —ç—Ç–æ–≥–æ —à–∞–≥–∞, –Ω–∞ —ç—Ç–∞–ø–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏
        current_price_float = self.get_current_price(symbol)
        if current_price_float > 0:
          required_quote = Decimal(str(formatted_quantity)) * Decimal(str(current_price_float)) * Decimal(
            str(SAFETY_MARGIN))
          if Decimal(str(available_balance)) < required_quote:
            raise InsufficientFundsError(
              f"Need approx {required_quote:.4f} {quote_asset}, available {available_balance:.4f} for {symbol} BUY"
            )
      elif side == Client.SIDE_SELL:
        if Decimal(str(available_balance)) < Decimal(str(formatted_quantity)):
          raise InsufficientFundsError(
            f"Need {formatted_quantity} {base_asset}, available {available_balance} for {symbol} SELL"
          )

      order_params = {
        'symbol': symbol,
        'side': side.upper(),
        'type': order_type.upper(),
        'newOrderRespType': 'FULL'  # –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fills
      }

      if order_type == Client.ORDER_TYPE_MARKET:
        order_params['quantity'] = formatted_quantity
      elif order_type == Client.ORDER_TYPE_LIMIT:
        if not formatted_price:
          raise InvalidOrderParameters(f"Price is required for LIMIT order for {symbol}")
        order_params.update({
          'quantity': formatted_quantity,
          'price': str(formatted_price),  # Binance API –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
          'timeInForce': time_in_force
        })
      # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (STOP_LOSS_LIMIT, etc.)

      self.logger.debug(f"Sending order params to Binance for {symbol}: {order_params}")

      response = self.client.create_order(**order_params)
      self.logger.debug(f"Binance API response for {symbol} order: {json.dumps(response, indent=2)}")

      executed_qty_final = Decimal('0')
      avg_price_final = Decimal('0')
      commission_final = Decimal('0')
      commission_asset_final = ''
      order_status = response.get('status', 'UNKNOWN')

      # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ 'fills', –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
      fills = response.get('fills', [])
      if fills:
        accumulated_qty = Decimal('0')
        accumulated_quote_qty = Decimal('0')
        accumulated_commission = Decimal('0')

        for fill in fills:
          fill_qty = Decimal(str(fill.get('qty', '0')))
          fill_price = Decimal(str(fill.get('price', '0')))
          accumulated_qty += fill_qty
          accumulated_quote_qty += fill_qty * fill_price
          accumulated_commission += Decimal(str(fill.get('commission', '0')))
          if not commission_asset_final and fill.get('commissionAsset'):
            commission_asset_final = fill['commissionAsset']

        if accumulated_qty > Decimal('0'):
          executed_qty_final = accumulated_qty
          avg_price_final = accumulated_quote_qty / accumulated_qty
          commission_final = accumulated_commission
          self.logger.debug(
            f"Calculated from {len(fills)} fills for {symbol}: exec_qty={executed_qty_final}, avg_price={avg_price_final:.4f}")
        else:  # Fills –µ—Å—Ç—å, –Ω–æ —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –≤ –Ω–∏—Ö 0
          self.logger.warning(
            f"Fills array is present but total quantity from fills is 0 for {symbol}. Response: {response}")
          # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ response['executedQty']
          executed_qty_final = Decimal(str(response.get('executedQty', '0')))
          if executed_qty_final > Decimal('0'):
            # –¶–µ–Ω—É –∏–∑ fills –≤–∑—è—Ç—å –Ω–µ –º–æ–∂–µ–º, avg_price_final –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 0
            self.logger.warning(
              f"Using executedQty ({executed_qty_final}) from main response for {symbol} as fills qty is 0. Avg price cannot be determined from fills.")
          else:
            self.logger.warning(f"executedQty from main response is also 0 for {symbol}.")

      elif response.get('executedQty'):  # Fills –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å executedQty –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        executed_qty_final = Decimal(str(response.get('executedQty', '0')))
        # avg_price_final –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 0, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç fills –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        if executed_qty_final > Decimal('0'):
          self.logger.warning(
            f"Order for {symbol} has executedQty={executed_qty_final} but no 'fills' data. "
            f"Avg price cannot be determined. This is common in Testnet. Status: {order_status}."
          )
        else:
          self.logger.warning(f"executedQty from main response is 0 and no fills for {symbol}.")
      else:
        self.logger.warning(
          f"No 'fills' and no 'executedQty' in response for {symbol}. Order likely not filled or partially filled without details. Status: {order_status}.")

      # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –æ—Ä–¥–µ—Ä —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω, –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è "—É—Å–ø–µ—à–Ω–æ–≥–æ" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      # –°—Ç–∞—Ç—É—Å FILLED –∏–ª–∏ PARTIALLY_FILLED –ò –µ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      is_considered_executed = (order_status in ['FILLED', 'PARTIALLY_FILLED'] and executed_qty_final > Decimal('0')) or \
                               (
                                   order_status == 'NEW' and order_type != Client.ORDER_TYPE_MARKET)  # –î–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–∏—Å—å

      if not is_considered_executed and order_type == Client.ORDER_TYPE_MARKET:
        # –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç executed_qty, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        raise OrderExecutionError(
          f"Market order for {symbol} reported as {order_status} with zero executed quantity. Response: {json.dumps(response)}")

      result = {
        'symbol': symbol,
        'side': side,
        'order_type': order_type,
        'requested_qty': float(formatted_quantity),  # float –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è
        'executed_qty': float(executed_qty_final),  # float
        'avg_price': float(avg_price_final.quantize(Decimal('0.00000001')) if avg_price_final > 0 else 0.0),
        # float, –æ–∫—Ä—É–≥–ª—è–µ–º
        'commission': float(commission_final),  # float
        'commission_asset': commission_asset_final,
        'status': order_status,
        'success': is_considered_executed or order_status == 'FILLED',
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ FILLED –∏–ª–∏ –µ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ
        'exchange_id': response.get('orderId'),
        'raw_response': response  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
      }

      self.logger.info(
        f"‚úÖ Order for {symbol} processed: Status {result['status']}, Executed {result['executed_qty']} @ ~{result['avg_price']:.4f} "
        f"(Commission: {result['commission']:.6f} {result['commission_asset']})"
      )
      return result

    except exceptions.BinanceAPIException as e:
      error_msg = f"üö® Binance API Error for {symbol} [{e.status_code}]: {e.message}. Request: {e.request}"
      self.logger.error(error_msg)
      # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å: self.logger.error(f"Response body: {e.response.text if e.response else 'N/A'}")
      raise OrderExecutionError(error_msg)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ

    except InsufficientFundsError as e:  # –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
      self.logger.error(f"üî• InsufficientFundsError for {symbol}: {str(e)}")
      raise  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã DecisionMaker –º–æ–≥ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

    except InvalidOrderParameters as e:  # –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
      self.logger.error(f"üî• InvalidOrderParameters for {symbol}: {str(e)}")
      raise  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ

    except Exception as e:
      error_msg = f"üî• Critical error during order execution for {symbol}: {str(e)}"
      self.logger.error(error_msg, exc_info=True)
      raise OrderExecutionError(error_msg)

  def cancel_order(self, symbol: str, order_id: str) -> Dict:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä"""
    try:
      self.logger.info(f"Attempting to cancel order {order_id} for {symbol}")
      response = self.client.cancel_order(
        symbol=symbol,
        orderId=order_id
      )
      self.logger.info(f"Cancel order response for {order_id} ({symbol}): {response}")
      return response
    except exceptions.BinanceAPIException as e:
      self.logger.error(f"Cancel order failed for {order_id} ({symbol}): {e.message}")
      raise OrderCancelError(f"Cancel failed for {symbol} order {order_id}: {e.message}")

  def get_available_balance(self, asset: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∞ –∫–∞–∫ float"""
    try:
      account = self.client.get_account()
      balance_info = next(
        (acc for acc in account['balances'] if acc['asset'] == asset),
        None
      )
      if balance_info:
        return float(balance_info['free'])
      self.logger.warning(f"Asset {asset} not found in account balances.")
      return 0.0
    except exceptions.BinanceAPIException as e:
      self.logger.error(f"Failed to get balance for {asset} due to API error: {e.message}")
      return 0.0
    except Exception as e:
      self.logger.error(f"Unexpected error getting balance for {asset}: {str(e)}")
      return 0.0

  def get_current_price(self, symbol: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ float"""
    try:
      ticker = self.client.get_symbol_ticker(symbol=symbol)
      return float(ticker['price'])
    except exceptions.BinanceAPIException as e:
      self.logger.error(f"Failed to get price for {symbol} due to API error: {e.message}")
      return 0.0  # –∏–ª–∏ raise, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã
    except Exception as e:
      self.logger.error(f"Unexpected error getting price for {symbol}: {str(e)}")
      return 0.0


# Custom Exceptions
class OrderExecutionError(Exception):
  pass


class OrderCancelError(Exception):
  pass


class InsufficientFundsError(OrderExecutionError):  # –ù–∞—Å–ª–µ–¥—É–µ–º –æ—Ç OrderExecutionError
  pass


class InvalidSymbolError(OrderExecutionError):  # –ù–∞—Å–ª–µ–¥—É–µ–º –æ—Ç OrderExecutionError
  pass


class InvalidOrderParameters(OrderExecutionError):  # –ù–∞—Å–ª–µ–¥—É–µ–º –æ—Ç OrderExecutionError
  pass